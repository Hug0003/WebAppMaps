@using Domain
@using Web.ViewModel
@model SalleViewModel

<style>
    .formCreateSalle {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%,-50%);
        background-color: #f9f9f9;
        width: 60vw;
        min-height: 60vh;
        max-height: 70vh;
        display: flex;
        justify-self: center;
        flex-direction: column;
        justify-content: flex-start;
        align-items: center;
        border-radius: 1rem;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
        padding: 1rem;
        gap: 1em;
        transition: all .3s;
        overflow-y: auto;
    }

    .formCreateSalle::-webkit-scrollbar {
        width: 8px;
    }

    .formCreateSalle::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 4px;
    }

    .formCreateSalle::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 4px;
    }

    .formCreateSalle::-webkit-scrollbar-thumb:hover {
        background: #555;
    }

    .canvas-container {
        position: relative;
        margin: 20px 0;
        border: 1px solid #ccc;
        overflow: hidden;
        width: 80%;
        height: 450px;
        flex-shrink: 0; /* Empêche le canvas de rétrécir */
    }

    #imageCanvas {
        display: block;
        width: 100%;
        height: 100%;
        object-fit: contain;
    }

    .zoom-controls {
        position: absolute;
        bottom: 10px;
        right: 10px;
        background: rgba(255, 255, 255, 0.8);
        padding: 5px;
        border-radius: 4px;
        z-index: 1000;
    }

    .zoom-btn {
        padding: 5px 10px;
        margin: 0 5px;
        cursor: pointer;
        background: #007bff;
        color: white;
        border: none;
        border-radius: 3px;
    }

    .zoom-btn:hover {
        background: #0056b3;
    }

    .form-group {
        width: 100%;
        max-width: 500px;
    }
</style>

<form asp-action="CreateSalle" method="post" enctype="multipart/form-data" class="formCreateSalle">
    <h1>Créer une salle</h1>
    <div class="form-group">
        <input name="Nom" type="text" class="form-input" placeholder="Nom de la salle" autocomplete="off" required />
    </div>
    <div class="form-group">
        <input name="Numero" type="text" class="form-input" placeholder="Numéro de la salle" autocomplete="off" required />
    </div>
    <div class="form-group">
        <select name="EtageId" class="form-input" id="addEtageToSalle">
            @foreach (var etage in ViewBag.EtageId)
            {
                <option value="@etage.Id" data-imgpath="@Url.Content("~/" + etage.ImgPlanEtagePath)">@etage.Nom</option>
            }
        </select>
    </div>

    <!-- Canvas pour le plan de l'étage -->
    <div class="canvas-container">
        <canvas id="imageCanvas"></canvas>
        <div class="zoom-controls">
            <button type="button" class="zoom-btn" data-action="zoom-in">+</button>
            <button type="button" class="zoom-btn" data-action="zoom-out">-</button>
            <button type="button" class="zoom-btn" data-action="reset">Reset</button>
        </div>
    </div>

    <div class="form-group">
        <select name="TypeSalle" id="typeSalle" class="form-input" onchange="showSpecificFields()">
            <option value="1">Réunion</option>
            <option value="2">Pause</option>
            <option value="3">Bubble</option>
        </select>
    </div>

    <!-- Champs spécifiques pour Salle Réunion -->
    <div id="reunionFields" style="display: none;" class="box_form-group">
        <div class="form-group">
            <label>Écran</label>
            <input value="true" type="checkbox" name="Ecran" />
        </div>
        <div class="form-group">
            <label>Caméra</label>
            <input value="true" type="checkbox" name="Camera" />
        </div>
        <div class="form-group">
            <label>Tableau blanc</label>
            <input value="true" type="checkbox" name="TableauBlanc" />
        </div>
        <div class="form-group">
            <label>Système audio</label>
            <input value="true" type="checkbox" name="SystemeAudio" />
        </div>
    </div>

    <!-- Champs spécifiques pour Salle Pause -->
    <div id="pauseFields" style="display: none;" class="box_form-group">
        <div class="form-group">
            <label for="distributeur">Distributeur</label>
            <input value="true" type="checkbox" name="Distributeur" id="distributeur" />
        </div>
        <div class="form-group">
            <label for="frigo">Frigo</label>
            <input value="true" type="checkbox" name="Frigo" id="frigo" />
        </div>
        <div class="form-group form-goup_input">
            <input type="number" id="microondes" name="MicroOndes" class="form-control" placeholder="Nombre de micro-ondes" />
        </div>
        <div class="form-group form-goup_input">
            <input type="number" name="Evier" class="form-input" id="evier" placeholder="Nombre d'évier'" />
        </div>

        <div class="form-group form-goup_input">
            <input type="number" name="NbTables" class="form-input" placeholder="Nombre de tables" />
        </div>
        <div class="form-group form-goup_input">
            <input type="number" name="NbChaises" class="form-input" placeholder="Nombre de chaises" />
        </div>
    </div>

    <!-- Champs spécifiques pour Salle Bubble -->
    <div id="bubbleFields" style="display: none;" class="box_form-group">
        <div class="form-group">
            <label>Prise électrique</label>
            <input value="true" type="checkbox" name="PriseElectrique" />
        </div>
    </div>

    <div class="form-group">
        <input name="ImgSallePath" type="file" class="form-input form-addImg" />
    </div>
    <button type="submit" class="btn btn-primary">Créer Salle</button>
</form>

@section Scripts {
    <script>
        const canvas = document.getElementById('imageCanvas');
        const ctx = canvas.getContext('2d');
        const addEtageToSalle = document.getElementById('addEtageToSalle');
        const container = document.querySelector('.canvas-container');

        let scale = 0.3;
        const MIN_SCALE = 0.3;
        const MAX_SCALE = 2;
        const MAX_TRANSLATE = 100; // Limite de déplacement en pixels (1rem = 16px, donc environ 6rem)
        let isDragging = false;
        let startX, startY;
        let translateX = 0;
        let translateY = 0;
        let lastTranslateX = 0;
        let lastTranslateY = 0;
        let currentImage = null;

        addEtageToSalle.addEventListener('change', function () {
            const selectedOption = addEtageToSalle.options[addEtageToSalle.selectedIndex];
            const imagePath = selectedOption.dataset.imgpath;
            console.log("Chemin de l'image :", imagePath); // Pour déboguer
            if (imagePath) {
                loadImageOnCanvas(imagePath);
            }
        });

        function loadImageOnCanvas(imagePath) {
            const img = new Image();
            img.crossOrigin = "anonymous";
            
            img.onload = function () {
                currentImage = img;
                const containerWidth = container.clientWidth;
                const containerHeight = container.clientHeight;
                const aspectRatio = img.height / img.width;
                
                canvas.width = containerWidth;
                canvas.height = containerHeight;
                
                scale = 0.3;
                translateX = 0;
                translateY = 0;
                
                drawImage();
            };

            img.onerror = function () {
                console.error("Erreur de chargement de l'image : ", imagePath);
                alert("Erreur de chargement de l'image. Veuillez vérifier le chemin de l'image.");
            };

            img.src = imagePath;
        }

        function drawImage() {
            if (!currentImage) return;

            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.save();
            
            // Déplacer au centre du canvas
            ctx.translate(canvas.width / 2, canvas.height / 2);
            
            // Appliquer la rotation
            ctx.rotate(-Math.PI / 2);
            
            // Appliquer le zoom
            ctx.scale(scale, scale);
            
            // Appliquer la translation
            ctx.translate(translateX / scale, translateY / scale);
            
            // Dessiner l'image centrée
            const x = -currentImage.width / 2;
            const y = -currentImage.height / 2;
            ctx.drawImage(currentImage, x, y);
            
            ctx.restore();
        }

        // Gestion du zoom
        document.querySelector('.zoom-controls').addEventListener('click', function(e) {
            const button = e.target.closest('.zoom-btn');
            if (!button) return;

            const action = button.dataset.action;
            let newScale = scale;
            
            switch(action) {
                case 'zoom-in':
                    newScale = Math.min(scale * 1.2, MAX_SCALE);
                    break;
                case 'zoom-out':
                    newScale = Math.max(scale / 1.2, MIN_SCALE);
                    break;
                case 'reset':
                    newScale = 0.3;
                    translateX = 0;
                    translateY = 0;
                    break;
            }
            
            if (newScale !== scale) {
                scale = newScale;
                drawImage();
            }
        });

        // Gestion du déplacement
        canvas.addEventListener('mousedown', function(e) {
            isDragging = true;
            startX = e.clientX;
            startY = e.clientY;
            lastTranslateX = translateX;
            lastTranslateY = translateY;
        });

        canvas.addEventListener('mousemove', function(e) {
            if (!isDragging) return;
            
            const deltaX = startX - e.clientX;
            const deltaY = startY - e.clientY;
            
            // Pour une rotation de -90 degrés, on inverse X et Y et on inverse le signe de Y
            let newTranslateX = lastTranslateX + deltaY;
            let newTranslateY = lastTranslateY - deltaX;
            
            // Appliquer les limites de déplacement
            newTranslateX = Math.max(Math.min(newTranslateX, MAX_TRANSLATE), -MAX_TRANSLATE);
            newTranslateY = Math.max(Math.min(newTranslateY, MAX_TRANSLATE), -MAX_TRANSLATE);
            
            translateX = newTranslateX;
            translateY = newTranslateY;
            
            drawImage();
        });

        canvas.addEventListener('mouseup', function() {
            isDragging = false;
            lastTranslateX = translateX;
            lastTranslateY = translateY;
        });

        canvas.addEventListener('mouseleave', function() {
            isDragging = false;
            lastTranslateX = translateX;
            lastTranslateY = translateY;
        });

        // Gestion du zoom avec la molette
        canvas.addEventListener('wheel', function(e) {
            e.preventDefault();
            
            // Obtenir la position de la souris par rapport au canvas
            const rect = canvas.getBoundingClientRect();
            const mouseX = e.clientX - rect.left;
            const mouseY = e.clientY - rect.top;
            
            // Calculer le point de zoom (position de la souris)
            const zoomPointX = (mouseX - translateX) / scale;
            const zoomPointY = (mouseY - translateY) / scale;
            
            // Déterminer la direction du zoom
            const delta = e.deltaY > 0 ? 0.9 : 1.1;
            const newScale = Math.min(Math.max(scale * delta, MIN_SCALE), MAX_SCALE);
            
            // Calculer le nouveau décalage pour maintenir le point sous la souris
            translateX = mouseX - zoomPointX * newScale;
            translateY = mouseY - zoomPointY * newScale;
            
            // Appliquer le nouveau zoom
            scale = newScale;
            
            drawImage();
        });

        // Charger l'image au chargement initial
        window.onload = function() {
            if (addEtageToSalle.selectedIndex >= 0) {
                const selectedOption = addEtageToSalle.options[addEtageToSalle.selectedIndex];
                const imagePath = selectedOption.dataset.imgpath;
                if (imagePath) {
                    loadImageOnCanvas(imagePath);
                }
            }
        };
    </script>
}


